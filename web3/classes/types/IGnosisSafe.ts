/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers"
import { FunctionFragment, Result } from "@ethersproject/abi"
import { Listener, Provider } from "@ethersproject/providers"
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common"

export interface IGnosisSafeInterface extends utils.Interface {
    contractName: "IGnosisSafe"
    functions: {
        "getOwners()": FunctionFragment
        "getThreshold()": FunctionFragment
    }

    encodeFunctionData(functionFragment: "getOwners", values?: undefined): string
    encodeFunctionData(functionFragment: "getThreshold", values?: undefined): string

    decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result
    decodeFunctionResult(functionFragment: "getThreshold", data: BytesLike): Result

    events: {}
}

export interface IGnosisSafe extends BaseContract {
    contractName: "IGnosisSafe"
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IGnosisSafeInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        getOwners(overrides?: CallOverrides): Promise<[string[]]>

        getThreshold(overrides?: CallOverrides): Promise<[BigNumber]>
    }

    getOwners(overrides?: CallOverrides): Promise<string[]>

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>

    callStatic: {
        getOwners(overrides?: CallOverrides): Promise<string[]>

        getThreshold(overrides?: CallOverrides): Promise<BigNumber>
    }

    filters: {}

    estimateGas: {
        getOwners(overrides?: CallOverrides): Promise<BigNumber>

        getThreshold(overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
